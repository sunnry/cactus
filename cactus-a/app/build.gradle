apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "24.0.1"

    sourceSets {
        main {
            jni.srcDirs = []
            // jniLibs.srcDir 'src/main/jni' // - Doesn't work, leaves out the .so files generated by ndk-build
        }
    }

    defaultConfig {
        applicationId "org.freedesktop.gstreamer.tutorial_3"
        minSdkVersion 9
        targetSdkVersion 14

        ndk {
            moduleName "tutorial-3"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile fileTree(dir: "$buildDir/libs", include: 'ndk-libs')
    // Adds our jar file containing NDK code (.so files)
    compile files("$buildDir/libs/ndk-libs.jar")
    // Just debug info
    println("$buildDir/libs")

    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile files('libs/engine.io-client-0.7.0.jar')
}

// Before compiling our app, prepare NDK code
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkLibsToJar
}

// Packs ndk into JAR
task ndkLibsToJar(type: Zip, dependsOn: 'ndkBuild', description: 'Create a JAR of the native libs') {
    destinationDir new File(buildDir, 'libs')
    baseName 'ndk-libs'
    extension 'jar'
    from(new File(buildDir, 'libs')) { include '**/*.so' }
    into 'lib/'
}

// Build native code using mk files like on Eclipse
task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
    //def ndkDir = project.plugins.findPlugin('com.android.application').getNdkFolder()
    def ndkDir = '/home/tony/android_ndk/android-ndk-r12b'
    println(ndkDir)

    commandLine "$ndkDir/ndk-build",
            'NDK_PROJECT_PATH=build',
            'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
            'NDK_APPLICATION_MK=src/main/jni/Application.mk'


}
